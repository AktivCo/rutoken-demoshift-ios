stages:
  - build
  - publish


variables:
  VAULT_ADDR: "https://vault.aktivco.ru"
  FOLDER_ARTIFACTS: "artifacts"

.vault_provision_secrets: &vault_secrets
  - PROJECT_ROLE="ci-${CI_PROJECT_NAME}"
  - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=${PROJECT_ROLE} jwt=${CI_JOB_JWT})"

  - IOS_DEVELOPER_IDENTITY="/tmp/ios_developer_identity.p12"
  - DISTRIBUTION_IDENTITY="/tmp/distribution_identity.p12"

  - PROVISIONING_DIR="${HOME}/Library/MobileDevice/Provisioning Profiles"
  - mkdir -p "${PROVISIONING_DIR}"
  - BUILD_PROFILE="${PROVISIONING_DIR}/build.mobileprovision"
  - EXPORT_PROFILE="${PROVISIONING_DIR}/export.mobileprovision"

  - vault kv get -field=identity ci/apple/identity/ios-developer-id | base64 --decode > ${IOS_DEVELOPER_IDENTITY}
  - vault kv get -field=identity ci/apple/identity/distribution-id | base64 --decode > ${DISTRIBUTION_IDENTITY}

  - vault kv get -field=build ci/apple/${CI_PROJECT_NAME}/provisioning-profile | base64 --decode > "${BUILD_PROFILE}"
  - vault kv get -field=export ci/apple/${CI_PROJECT_NAME}/provisioning-profile | base64 --decode > "${EXPORT_PROFILE}"

  - APPLE_ACCOUNT_USER="$(vault kv get -field=user ci/apple/identity/account)"
  - APPLE_ACCOUNT_PASSWORD="$(vault kv get -field=password ci/apple/identity/account)"

  - IOS_DEVELOPER_IDENTITY_PASSPHRASE="$(vault kv get -field=passphrase ci/apple/identity/ios-developer-id)"
  - DISTRIBUTION_IDENTITY_PASSPHRASE="$(vault kv get -field=passphrase ci/apple/identity/distribution-id)"

  - vault token revoke -self

    # Import Sign Certificate
    # https://stackoverflow.com/questions/10538942/add-a-keychain-to-search-list
    # https://github.com/fastlane/fastlane/issues/15185#issuecomment-577876643
  - SIGN_KEYCHAIN="${HOME}/Library/Keychains/login.keychain"
  - SIGN_KEYCHAIN_FILE="${SIGN_KEYCHAIN}-db"
  - KEYCHAIN_PASSWORD="vagrant"

    # Add keychain to list of keychains
  - security list-keychains -s ${SIGN_KEYCHAIN_FILE}
  - security unlock-keychain -p ${KEYCHAIN_PASSWORD} ${SIGN_KEYCHAIN_FILE}
  - |
    security import ${IOS_DEVELOPER_IDENTITY} \
                    -P ${IOS_DEVELOPER_IDENTITY_PASSPHRASE} \
                    -k ${SIGN_KEYCHAIN_FILE} \
                    -T /usr/bin/codesign \
                    -T /usr/bin/productsign
  - |
    security import ${DISTRIBUTION_IDENTITY} \
                    -P ${DISTRIBUTION_IDENTITY_PASSPHRASE} \
                    -k ${SIGN_KEYCHAIN_FILE} \
                    -T /usr/bin/codesign \
                    -T /usr/bin/productsign
  - "security set-key-partition-list -S apple-tool:,apple: -k ${KEYCHAIN_PASSWORD} ${SIGN_KEYCHAIN_FILE} > /dev/null"


build:
  stage: build
  tags: [vagrant-darwin]
  variables:
    RT_CI_VAGRANT_BOX_NAME: rutoken/macos
    RT_CI_VAGRANT_BOX_VERSION: 1.1.0
    RT_CI_VAGRANT_BOX_CPUS: 2
    RT_CI_VAGRANT_BOX_MEMORY: 2048
  before_script:
    - *vault_secrets
  script:
    - PATH_TO_ARCHIVE="${CI_BUILDS_DIR}/demoshift.xcarchive"
    - PATH_TO_EXPORT_DIR="${CI_BUILDS_DIR}/demoshift-release"
    - echo "BuildNumber = ${CI_JOB_ID}" > demoshift/Config.xcconfig
    - |
      xcodebuild clean archive -configuration release \
                               -scheme demoshift \
                               -archivePath ${PATH_TO_ARCHIVE}
    - |
      xcodebuild -exportArchive \
                 -archivePath ${PATH_TO_ARCHIVE} \
                 -exportOptionsPlist demoshift/export.plist \
                 -exportPath ${PATH_TO_EXPORT_DIR}
    - |
      if [[ ${CI_COMMIT_REF_NAME} = ${CI_DEFAULT_BRANCH} ]]
      then
          xcrun altool --upload-app \
                       --type ios \
                       -f ${PATH_TO_EXPORT_DIR}/*.ipa \
                       -u ${APPLE_ACCOUNT_USER} \
                       -p ${APPLE_ACCOUNT_PASSWORD}
      fi
    - mkdir ${FOLDER_ARTIFACTS}
    - mv ${PATH_TO_ARCHIVE} ${FOLDER_ARTIFACTS}/ios-arm64-clang
    - chmod -R +r ${FOLDER_ARTIFACTS}
  artifacts:
    paths:
      - ${FOLDER_ARTIFACTS}/
    expire_in: 2 hrs


publishArtifacts:
  image: 
    name: ${NEXUS_PREFIX}-publish-artifacts:latest
    entrypoint: ["/bin/bash"]
  stage: publish
  tags: [local]
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none
    PACKAGE_URL: "${AKTIV_BUILDS_DIRECTORY}/${CI_PROJECT_NAME}/${CI_PROJECT_NAME}-${CI_COMMIT_SHA}.zip"
  before_script:
    - PROJECT_ROLE="ci-publish-artifacts"
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=${PROJECT_ROLE} jwt=${CI_JOB_JWT})"

    - mkdir ${HOME}/.ssh
    - SSH_PRIVATE_KEY="${HOME}/.ssh/id_rsa"

    - vault kv get -field=private_key gitlab-ci/publish-artifacts-ssh-key > ${SSH_PRIVATE_KEY}
    - chmod 0600 ${SSH_PRIVATE_KEY}

    - vault token revoke -self

  script:
    - FOLDER_OUT="${CI_PROJECT_DIR}/out"
    - ALL_ARTIFACTS="${FOLDER_OUT}/${CI_PROJECT_NAME}"
    - mkdir -p "${ALL_ARTIFACTS}"

    - cp -r ${FOLDER_ARTIFACTS}/* ${ALL_ARTIFACTS}/

    - curl --output /dev/null --silent --head --fail ${PACKAGE_URL} && ret=0 || ret=${?}
    - UPLOAD_ARCHIVE="${CI_PROJECT_DIR}/${CI_PROJECT_NAME}.zip"
    - |
      if [ ${ret} -eq 0 ]
      then
          curl -O ${PACKAGE_URL}
          unzip ${PACKAGE}

          for ARTIFACT in $(ls "${ALL_ARTIFACTS}")
          do
              if [ ! -d "${CI_PROJECT_NAME}/${ARTIFACT}" ]
              then
                  pushd ${FOLDER_OUT}
                  zip -r -g ${UPLOAD_ARCHIVE} ${CI_PROJECT_NAME}/${ARTIFACT}
                  popd
              fi
          done
      else
          pushd ${FOLDER_OUT}
          echo ${CI_COMMIT_SHA} > ${ALL_ARTIFACTS}/${CI_PROJECT_NAME}_version
          zip -9 -r ${UPLOAD_ARCHIVE} ./*
          popd
      fi

    - echo "Uploading ${PACKAGE_URL}"
    - |
      scp -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          ${UPLOAD_ARCHIVE} ${PACKAGE_URL}
