stages:
  - build
  - archive
  - export
  - deploy


workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: always


variables:
  PUBLISH_TO:
    value: "none"
    description: "To whom build should be published, possible values: none, dev, internal, external"

  VAULT_ADDR: "https://vault.aktivco.ru"
  FOLDER_ARTIFACTS: "artifacts"

  MATCH_PASSWORD: ""
  KEYCHAIN_PASSWORD: "vagrant"
  KEY_ID: ""
  ISSUER_ID: ""
  API_KEY: "/tmp/api_key.p8"
  FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 120


.vault_base_secrets: &vault_base_secrets
  - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=${PROJECT_ROLE} jwt=${CI_JOB_JWT})"

  - KEY_ID="$(vault kv get -field=key_id ci/apple/identity/api-key)"
  - ISSUER_ID="$(vault kv get -field=issuer_id ci/apple/identity/api-key)"
  - vault kv get -field=key ci/apple/identity/api-key | base64 --decode > ${API_KEY}
  
  - SSH_PRIVATE_KEY="${HOME}/.ssh/id_rsa"
  - vault kv get -field=private ci/apple/identity/ssh-key > ${SSH_PRIVATE_KEY}
  - chmod 0600 ${SSH_PRIVATE_KEY}
  

.keychain_creation: &keychain_creation
  - SIGN_KEYCHAIN="${HOME}/Library/Keychains/login.keychain"
  - SIGN_KEYCHAIN_FILE="${SIGN_KEYCHAIN}-db"

  - security list-keychains -s ${SIGN_KEYCHAIN_FILE}
  - security unlock-keychain -p ${KEYCHAIN_PASSWORD} ${SIGN_KEYCHAIN_FILE}


.vautl_build_secrets: &vault_build_secrets
  - PROJECT_ROLE="ci-${CI_PROJECT_NAME}"

  - *vault_base_secrets
  - DEVELOPMENT_MATCH_PASSWORD="$(vault kv get -field=developer ci/apple/identity/fastlane-identity)"

  - vault token revoke -self
  - *keychain_creation


.vault_export_secrets: &vault_export_secrets
  - PROJECT_ROLE="ci-ios-prod"

  - *vault_base_secrets
  - DISTRIBUTION_MATCH_PASSWORD="$(vault kv get -field=distribution ci/apple/identity-prod/fastlane-identity)"

  - vault token revoke -self
  - *keychain_creation


.vault_testflight_secrets: &vault_testflight_secrets
  - PROJECT_ROLE="ci-ios-prod"
  - *vault_base_secrets
  - vault token revoke -self

  - *keychain_creation


build:
  stage: build
  tags: [vagrant-darwin]
  variables:
    RT_CI_VAGRANT_BOX_NAME: rutoken/macos
    RT_CI_VAGRANT_BOX_VERSION: 1.3.0
    RT_CI_VAGRANT_BOX_CPUS: 2
    RT_CI_VAGRANT_BOX_MEMORY: 2048
  before_script:
    - *vault_build_secrets

    - ip=$(dig scm.aktivco.ru +short)
    - ssh-keyscan scm.aktivco.ru,$ip >> ~/.ssh/known_hosts
  script:
    - mkdir ${FOLDER_ARTIFACTS}
    - PATH_TO_ARCHIVE="${FOLDER_ARTIFACTS}/ios-arm64-clang/demoshift.xcarchive"
    - echo "BuildNumber = ${CI_JOB_ID}" > demoshift/Config.xcconfig
    - MATCH_PASSWORD=${DEVELOPMENT_MATCH_PASSWORD}
    - |
      fastlane build output_path:${PATH_TO_ARCHIVE}
    - chmod -R +r ${FOLDER_ARTIFACTS}
  artifacts:
    paths:
      - ${FOLDER_ARTIFACTS}/
    expire_in: 2 hrs


archive:
  image: 
    name: ${NEXUS_PREFIX}-publish-artifacts:latest
    entrypoint: ["/bin/bash"]
  stage: archive
  tags: [local]
  needs:
    - job: build
  variables:
    GIT_STRATEGY: none
  before_script:
    - PROJECT_ROLE="ci-publish-artifacts"
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=${PROJECT_ROLE} jwt=${CI_JOB_JWT})"

    - mkdir ${HOME}/.ssh
    - SSH_PRIVATE_KEY="${HOME}/.ssh/id_rsa"

    - vault kv get -field=private_key gitlab-ci/publish-artifacts-ssh-key > ${SSH_PRIVATE_KEY}
    - chmod 0600 ${SSH_PRIVATE_KEY}

    - vault token revoke -self

  script:
    - |
      if [[ ${PUBLISH_TO} == "none" ]]
      then
          PROJECT_NAME_LOCAL="${CI_PROJECT_NAME}"
      else
          PROJECT_NAME_LOCAL="${CI_PROJECT_NAME}-production"
      fi
    - PACKAGE_URL="${AKTIV_BUILDS_DIRECTORY}/${PROJECT_NAME_LOCAL}/${PROJECT_NAME_LOCAL}-${CI_COMMIT_SHA}.zip"

    - FOLDER_OUT="${CI_PROJECT_DIR}/out"
    - ALL_ARTIFACTS="${FOLDER_OUT}/${CI_PROJECT_NAME}"
    - mkdir -p "${ALL_ARTIFACTS}"

    - cp -r ${FOLDER_ARTIFACTS}/* ${ALL_ARTIFACTS}/

    - curl --output /dev/null --silent --head --fail ${PACKAGE_URL} && ret=0 || ret=${?}

    - |
      if [[ ${ret} -eq 0 && ${PUBLISH_TO} != "none" ]]
      then
          echo "No need to reupload archive!"
          exit 0
      fi

    - UPLOAD_ARCHIVE="${CI_PROJECT_DIR}/${CI_PROJECT_NAME}.zip"
    - |
      if [ ${ret} -eq 0 ]
      then
          curl -O ${PACKAGE_URL}
          unzip ${PACKAGE}

          for ARTIFACT in $(ls "${ALL_ARTIFACTS}")
          do
              if [ ! -d "${CI_PROJECT_NAME}/${ARTIFACT}" ]
              then
                  pushd ${FOLDER_OUT}
                  zip -r -g ${UPLOAD_ARCHIVE} ${CI_PROJECT_NAME}/${ARTIFACT}
                  popd
              fi
          done
      else
          pushd ${FOLDER_OUT}
          echo ${CI_COMMIT_SHA} > ${ALL_ARTIFACTS}/${CI_PROJECT_NAME}_version
          zip -9 -r ${UPLOAD_ARCHIVE} ./*
          popd
      fi

    - echo "Uploading ${PACKAGE_URL}"
    - |
      scp -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          ${UPLOAD_ARCHIVE} ${PACKAGE_URL}


export:
  stage: export
  tags: [vagrant-darwin]
  rules:
    - if: $PUBLISH_TO != "none"
    - when: never
  needs:
    - job: archive
      artifacts: false
      optional: true
  variables:
    RT_CI_VAGRANT_BOX_NAME: rutoken/macos
    RT_CI_VAGRANT_BOX_VERSION: 1.3.0
    RT_CI_VAGRANT_BOX_CPUS: 2
    RT_CI_VAGRANT_BOX_MEMORY: 2048
  before_script:
    - *vault_export_secrets

    - ip=$(dig scm.aktivco.ru +short)
    - ssh-keyscan scm.aktivco.ru,$ip >> ~/.ssh/known_hosts
  script:
    - PROJECT_NAME_LOCAL="${CI_PROJECT_NAME}-production"
    - PACKAGE_URL="http://aktiv-builds/new/${PROJECT_NAME_LOCAL}/${PROJECT_NAME_LOCAL}-${CI_COMMIT_SHA}.zip"
    - wget ${PACKAGE_URL} -O product.zip -q
    - unzip product.zip

    - PATH_TO_ARCHIVE="${CI_PROJECT_NAME}/ios-arm64-clang/demoshift.xcarchive"
    - PATH_TO_EXPORT_DIR="${CI_PROJECT_NAME}/ios-arm64-clang"
    - MATCH_PASSWORD=${DISTRIBUTION_MATCH_PASSWORD}
    - |
      fastlane export archive_path:${PATH_TO_ARCHIVE} output_path:${PATH_TO_EXPORT_DIR}
  artifacts:
    paths:
      - ${CI_PROJECT_NAME}/
    expire_in: 2 hrs


testFlight:
  stage: deploy
  tags: [vagrant-darwin]
  rules:
    - if: $PUBLISH_TO != "none"
    - when: never
  needs:
    - job: export
  variables:
    RT_CI_VAGRANT_BOX_NAME: rutoken/macos
    RT_CI_VAGRANT_BOX_VERSION: 1.3.0
    RT_CI_VAGRANT_BOX_CPUS: 2
    RT_CI_VAGRANT_BOX_MEMORY: 2048
  before_script:
    - *vault_testflight_secrets
  script:
    - PATH_TO_EXPORT_DIR="${CI_PROJECT_NAME}/ios-arm64-clang"
    - |
      fastlane publish ipa_path:"${PATH_TO_EXPORT_DIR}/demoshift.ipa" publish_to:${PUBLISH_TO}


