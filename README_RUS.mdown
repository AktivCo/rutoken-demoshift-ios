[Английский/English](README.mdown) 

## Описание

Рутокен Демосмена — приложение с реализованными модулями подписания документов и обнаружения 
NFC-устройств [семейства Рутокен ЭЦП](https://www.rutoken.ru/products/all/rutoken-ecp/),
когда одно мобильное устройство используется для работы несколькими членами рабочей группы.

## Требования

Рутокен Демосмена собирается с iOS SDK 13 и новее и запускается на устройствах c iOS начиная с 13. 

Внешние зависимости находятся в [Рутокен SDK](http://www.rutoken.ru/developers/sdk/)

Необходимые фреймворки:
* mobile/ios/pcsc/lib/RtPcsc.framework (Rutoken SDK);
* mobile/ios/pkcs11/lib/rtpkcs11ecp.framework (Rutoken SDK);
* openssl/rtengine/bin/ios-arm64/rtengine.framework (Rutoken SDK);
* openssl/openssl-shared-1.1/ios-arm64/openssl.framework (Rutoken SDK).

[Особенности встраивания NFC-устройств семейства Рутокен ЭЦП в собственные приложения.](https://dev.rutoken.ru/pages/viewpage.action?pageId=81527019)

## Как собрать

* положить фреймворки в директорию Frameworks в корне проекта;
* открыть demoshift.xcodeproj;
* в разделе General/Identity установить ваш Signing Identity.

## Предварительные действия

Чтобы создать на устройстве семейства Рутокен ЭЦП ключевую пару и сертификат, выполните следующие действия:

* Загрузите и установите [Рутокен Плагин](https://www.rutoken.ru/products/all/rutoken-plugin/) на компьютер;
* Перезагрузите браузер для завершения установки плагина;
* Через браузер зайдите на веб-сайт [Центр регистрации Рутокен](https://ra.rutoken.ru);
* Подключите устройство семейства Рутокен ЭЦП к компьютеру;
* Убедитесь, что веб-сайт обнаружил устройство;
* Создайте ключевую пару и сертификат, следуя инструкциям на веб-сайте;
* Убедитесь, что веб-сайт обнаружил ключевую пару и сертфикат на устройстве;
* Отключите устройство Рутокен от компьютера и используйте его вместе с устройством Apple.

## Подробности реализации

### Обнаружение Рутокена с NFC

Для начала работы с NFC устройствами Рутокен необходимо запустить обнаружение NFC устройств на iPhone.
По окончанию работы обнаружение необходимо остановить. Для этого используется функция:
`LONG SCardControl(
  [in]  SCARDHANDLE hCard,
  [in]  DWORD       dwControlCode,
  [in]  LPCVOID     pbSendBuffer,
  [in]  DWORD       cbSendLength,
  [out] LPVOID      pbRecvBuffer,
  [in]  DWORD       cbRecvLength,
  [out] LPDWORD     lpBytesReturned
)`

Параметр dwControlCode отвечает за тип операции, которую необходимо выполнить, и может принимать следующие значения:
- RUTOKEN_CONTROL_CODE_START_NFC - запуск обнаружения по NFC
- RUTOKEN_CONTROL_CODE_STOP_NFC - остановка обнаружения по NFC
- RUTOKEN_CONTROL_CODE_LAST_NFC_STOP_REASON - возврат причины прекращения обнаружения по NFC


Параметр pbSendBuffer используется для передачи дополнительной информации:
- при RUTOKEN_CONTROL_CODE_START_NFC: параметр задан в формате `"\(waitMessage)\0\(workMessage)\0\0"`
и содержит два сообщения: об ожидании карты и при обнаружении карты.
- при RUTOKEN_CONTROL_CODE_STOP_NFC: параметр содержит сообщение о завершении работы с картой.
- при RUTOKEN_CONTROL_CODE_LAST_NFC_STOP_REASON: параметр не используется.


Рекомендуемый порядок работы с Рутокеном с NFC:
- вызов функции SCardControl с параметром RUTOKEN_CONTROL_CODE_START_NFC
- работа с Рутокеном
- вызов функции SCardControl с параметром RUTOKEN_CONTROL_CODE_STOP_NFC

Причину завершения обнаружения NFC устройств можно получить с помощью вызова функции SCardControl с параметром RUTOKEN_CONTROL_CODE_LAST_NFC_STOP_REASON.

Возможные причины:
- RUTOKEN_NFC_STOP_REASON_FINISHED - вызов SCardControl с параметром RUTOKEN_CONTROL_CODE_STOP_NFC
- RUTOKEN_NFC_STOP_REASON_UNKNOWN - причина завершения неизвестна
- RUTOKEN_NFC_STOP_REASON_TIMEOUT - системный таймаут
- RUTOKEN_NFC_STOP_REASON_CANCELLED_BY_USER - нажатие кнопки "Отмена" на системном окне обнаружения NFC
- RUTOKEN_NFC_STOP_REASON_NO_ERROR - обнаружение NFC никогда не завершалось


### Получение типа устройства Рутокен
Получение типа устройства Рутокен доступно с помощью функции:
`LONG SCardGetAttrib(
  [in]      SCARDHANDLE hCard,
  [in]      DWORD       dwAttrId,
  [out]     LPBYTE      pbAttr,
  [in, out] LPDWORD     pcbAttrLen
)`

В качестве параметра dwAttrId необходимо передать SCARD_ATTR_VENDOR_IFD_TYPE.

Возможные типы:
- RUTOKEN_UNKNOWN_TYPE
- RUTOKEN_BT_TYPE
- RUTOKEN_NFC_TYPE
- RUTOKEN_VCR_TYPE

### Работа с виртуальным считывателем
Для спаривания с новым виртуальным считывателем необходимо вызвать функцию `NSString* generatePairingQR(void)`,
она возвращает изображение QR-кода в виде base64 строки. Для спаривания необходимо отобразить QR-код на экране и считать его с помощью приложения Рутокен VCR.

Для получения списка спаренных виртуальных считывателей необходимо вызвать функцию `NSArray* listPairedVCR(void)`,
она возвращает массив словарей, содержащих информацию о считывателях.

Ключи словаря:
- name - имя считывателя
- cert - сертификат считывателя в виде BASE64-строки
- fingerprint - SHA1-хеш от сертификата считывателя

Для отмены спаривания со считывателем необходимо вызвать функцию `BOOL unpairVCR(NSData* vcrId)`,
она возвращает true, если спаривание отменено и false в противном случае. В качестве параметра она принимает SHA1-хеш от сертификата считывателя, спаривание с которым необходимо отменить. 

## Ограничения

* Приложение Рутокен Демосмена может быть запущено только на физических устройствах Apple, не на эмуляторе.

## Лицензия

Программный код проекта распространяется по [Simplified BSD License] (LICENSE_RUS),
директория rutoken-demoshift-ios содержит объекты авторского права и распространяется по коммерческой лицензии АО "Актив-Софт", [текст лицензии] (https://download.rutoken.ru/License_Agreement.pdf).
